node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/ToFloat_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "Postprocessor/ToFloat_2"
  op: "Cast"
  input: "Postprocessor/ToFloat_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/ToFloat_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "Postprocessor/ToFloat_1"
  op: "Cast"
  input: "Postprocessor/ToFloat_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/scale_logits/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/gamma/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/gamma"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/beta/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/beta"
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights/read"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights"
      }
    }
  }
}
node {
  name: "Concatenate/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultiscaleGridAnchorGenerator/add_4:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultiscaleGridAnchorGenerator/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 51150
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Shape_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_4"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Shape_4"
  input: "MultiscaleGridAnchorGenerator/strided_slice_4/stack"
  input: "MultiscaleGridAnchorGenerator/strided_slice_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_3"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Shape_3"
  input: "MultiscaleGridAnchorGenerator/strided_slice_3/stack"
  input: "MultiscaleGridAnchorGenerator/strided_slice_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_2"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Shape_2"
  input: "MultiscaleGridAnchorGenerator/strided_slice_2/stack"
  input: "MultiscaleGridAnchorGenerator/strided_slice_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice_1"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Shape_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice_1/stack"
  input: "MultiscaleGridAnchorGenerator/strided_slice_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/strided_slice"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Shape"
  input: "MultiscaleGridAnchorGenerator/strided_slice/stack"
  input: "MultiscaleGridAnchorGenerator/strided_slice/stack_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/add"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/add/x"
  input: "MultiscaleGridAnchorGenerator/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/add_1"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/add"
  input: "MultiscaleGridAnchorGenerator/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/add_2"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/add_1"
  input: "MultiscaleGridAnchorGenerator/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/add_3"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/add_2"
  input: "MultiscaleGridAnchorGenerator/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/add_4"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/add_3"
  input: "MultiscaleGridAnchorGenerator/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Equal"
  op: "Equal"
  input: "MultiscaleGridAnchorGenerator/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/All"
  op: "All"
  input: "MultiscaleGridAnchorGenerator/assert_equal/Equal"
  input: "MultiscaleGridAnchorGenerator/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultiscaleGridAnchorGenerator/assert_equal/All"
  input: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  input: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  input: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  input: "MultiscaleGridAnchorGenerator/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  input: "MultiscaleGridAnchorGenerator/add_4"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv_1"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv_1/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 150
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_3"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_3/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Equal"
  op: "Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/All"
  op: "All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_0"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert/data_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/ToFloat_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/ToFloat"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Const_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Sqrt"
  op: "Sqrt"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_14"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_14"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToFloat_4"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/Const_13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_4"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_1"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_1/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/stack"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_2"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_12"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_12"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/truediv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/stack_1"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_3/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Meshgrid_2/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_3"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_6"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_6/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_2"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_5"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_5/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/sub"
  op: "Sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/add_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Identity"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/concat"
  input: "^MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split"
  op: "Split"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split/split_dim"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_4/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul_2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/mul_3"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Identity_4"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_4/Scale/concat"
  input: "^MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv_1"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv_1/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 600
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_3"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_3/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Equal"
  op: "Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/All"
  op: "All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_0"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert/data_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/ToFloat_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/ToFloat"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Const_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Sqrt"
  op: "Sqrt"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_11"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_11"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToFloat_3"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/Const_10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_4"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_1"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_1/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/stack"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_2"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_9"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_9"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/truediv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/stack_1"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_3/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Meshgrid_2/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_3"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_6"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_6/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_2"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_5"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_5/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/sub"
  op: "Sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/add_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Identity"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/concat"
  input: "^MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split"
  op: "Split"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split/split_dim"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_3/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul_2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/mul_3"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Identity_3"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_3/Scale/concat"
  input: "^MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv_1"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv_1/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2400
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_3"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_3/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Equal"
  op: "Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/All"
  op: "All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_0"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert/data_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/ToFloat_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/ToFloat"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Const_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Sqrt"
  op: "Sqrt"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_8"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_8"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToFloat_2"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/Const_7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_4"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_1"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_1/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/stack"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_2"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_6"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_6"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/truediv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/stack_1"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_3/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Meshgrid_2/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_3"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_6"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_6/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_2"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_5"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_5/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/sub"
  op: "Sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/add_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Identity"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/concat"
  input: "^MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split"
  op: "Split"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split/split_dim"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_2/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul_2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/mul_3"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Identity_2"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_2/Scale/concat"
  input: "^MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv_1"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv_1/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9600
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_3"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_3/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Equal"
  op: "Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/All"
  op: "All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_0"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert/data_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/ToFloat_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/ToFloat"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Const_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Sqrt"
  op: "Sqrt"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_5"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_5"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToFloat_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/Const_4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_4"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_1"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_1/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/stack"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_2"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/truediv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/stack_1"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_3/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Meshgrid_2/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_3"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_6"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_6/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_2"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_5"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_5/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/sub"
  op: "Sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/add_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Identity"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/concat"
  input: "^MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split"
  op: "Split"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split/split_dim"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul_2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/mul_3"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Identity_1"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates_1/Scale/concat"
  input: "^MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv_1"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv_1/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 640
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv/x"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 38400
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_3"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_3/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Equal"
  op: "Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/All"
  op: "All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Equal"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/All"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/ToFloat_1"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range"
  op: "Range"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range/start"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range/limit"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/ToFloat"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Rank_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Rank_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Shape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Rank"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Shape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/ones"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Const_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Sqrt"
  op: "Sqrt"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/truediv"
  op: "RealDiv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToFloat"
  op: "Cast"
  input: "MultiscaleGridAnchorGenerator/Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_4"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/ToFloat_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_1"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_4"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/ToFloat"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_3"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Reshape_1"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_1/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Tile_1"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Reshape_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/stack"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Tile_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_2"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice"
  op: "StridedSlice"
  input: "MultiscaleGridAnchorGenerator/Const"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice/stack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/truediv"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Reshape"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Tile"
  op: "Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/stack_1"
  op: "Pack"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_3/Tile"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Meshgrid_2/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_3"
  op: "Reshape"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/stack_1"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_6"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_6/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_2"
  op: "Add"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_5"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_5/x"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/sub"
  op: "Sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Reshape_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/sub"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/add_2"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Identity"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/concat"
  input: "^MultiscaleGridAnchorGenerator/GridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split"
  op: "Split"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split/split_dim"
  input: "MultiscaleGridAnchorGenerator/GridAnchorGenerator/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul_3"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul_2"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul_1"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul"
  op: "Mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/truediv"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul_2"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul_1"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/mul_3"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiscaleGridAnchorGenerator/Identity"
  op: "Identity"
  input: "MultiscaleGridAnchorGenerator/ToNormalizedCoordinates/Scale/concat"
  input: "^MultiscaleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Concatenate/concat"
  op: "ConcatV2"
  input: "MultiscaleGridAnchorGenerator/Identity"
  input: "MultiscaleGridAnchorGenerator/Identity_1"
  input: "MultiscaleGridAnchorGenerator/Identity_2"
  input: "MultiscaleGridAnchorGenerator/Identity_3"
  input: "MultiscaleGridAnchorGenerator/Identity_4"
  input: "Concatenate/concat/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/ExpandDims"
  op: "ExpandDims"
  input: "Concatenate/concat"
  input: "Postprocessor/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_1/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_1/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_1/biases/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/projection_1/biases"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_1/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_1/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/projection_1/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/smoothing_2/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_2/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_2/biases/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/projection_2/biases"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_2/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_2/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/projection_2/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_3/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_3/biases/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/projection_3/biases"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_3/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/projection_3/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/fpn/projection_3/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1024
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/weights"
      }
    }
  }
}
node {
  name: "Preprocessor/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00784313772
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter"
  op: "Enter"
  input: "Preprocessor/map/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge"
  op: "Merge"
  input: "Preprocessor/map/while/Enter"
  input: "Preprocessor/map/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_1"
  op: "Enter"
  input: "Preprocessor/map/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_1"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_1"
  input: "Preprocessor/map/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "image_tensor"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "image_tensor"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/TensorArrayUnstack/Shape"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_1"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayUnstack/range/start"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice"
  input: "Preprocessor/map/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/Shape"
  op: "Shape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/Shape"
  input: "Preprocessor/map/strided_slice/stack"
  input: "Preprocessor/map/strided_slice/stack_1"
  input: "Preprocessor/map/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/while/Less/Enter"
  op: "Enter"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Less_1"
  op: "Less"
  input: "Preprocessor/map/while/Merge_1"
  input: "Preprocessor/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Less"
  op: "Less"
  input: "Preprocessor/map/while/Merge"
  input: "Preprocessor/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/LogicalAnd"
  op: "LogicalAnd"
  input: "Preprocessor/map/while/Less"
  input: "Preprocessor/map/while/Less_1"
}
node {
  name: "Preprocessor/map/while/LoopCond"
  op: "LoopCond"
  input: "Preprocessor/map/while/LogicalAnd"
}
node {
  name: "Preprocessor/map/while/Switch_1"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_1"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_1"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch"
  op: "Switch"
  input: "Preprocessor/map/while/Merge"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity"
  op: "Identity"
  input: "Preprocessor/map/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/add_1/y"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/add_1"
  op: "Add"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_1"
  op: "NextIteration"
  input: "Preprocessor/map/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/stack_1"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize_images/ExpandDims/dim"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/stack"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/add/y"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/add"
  op: "Add"
  input: "Preprocessor/map/while/Identity"
  input: "Preprocessor/map/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration"
  op: "NextIteration"
  input: "Preprocessor/map/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray_2"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_2"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_3"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_3"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_3"
  input: "Preprocessor/map/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch_3"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_3"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_3"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit_3"
  op: "Exit"
  input: "Preprocessor/map/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Preprocessor/map/TensorArray_2"
  input: "Preprocessor/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayStack_1/range/start"
  input: "Preprocessor/map/TensorArrayStack_1/TensorArraySizeV3"
  input: "Preprocessor/map/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Preprocessor/map/TensorArray_2"
  input: "Preprocessor/map/TensorArrayStack_1/range"
  input: "Preprocessor/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Postprocessor/ToFloat"
  op: "Cast"
  input: "Preprocessor/map/TensorArrayStack_1/TensorArrayGatherV3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/unstack"
  op: "Unpack"
  input: "Postprocessor/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/unstack:1"
  input: "Postprocessor/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/truediv"
  op: "RealDiv"
  input: "Postprocessor/unstack"
  input: "Postprocessor/ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/zeros_like_1"
  op: "ZerosLike"
  input: "Postprocessor/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/zeros_like"
  op: "ZerosLike"
  input: "Postprocessor/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/stack_1"
  op: "Pack"
  input: "Postprocessor/zeros_like"
  input: "Postprocessor/zeros_like_1"
  input: "Postprocessor/truediv"
  input: "Postprocessor/truediv_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/Shape"
  op: "Shape"
  input: "Postprocessor/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_3"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/ResizeImage/stack_1"
  input: "Preprocessor/map/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/stack_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_3"
  op: "NextIteration"
  input: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray_1"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_1"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/resize_images/Squeeze"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_2"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_2"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_2"
  input: "Preprocessor/map/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch_2"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_2"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_2"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit_2"
  op: "Exit"
  input: "Preprocessor/map/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Preprocessor/map/TensorArray_1"
  input: "Preprocessor/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayStack/range/start"
  input: "Preprocessor/map/TensorArrayStack/TensorArraySizeV3"
  input: "Preprocessor/map/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Preprocessor/map/TensorArray_1"
  input: "Preprocessor/map/TensorArrayStack/range"
  input: "Preprocessor/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 640
        }
        dim {
          size: 640
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Preprocessor/mul"
  op: "Mul"
  input: "Preprocessor/mul/x"
  input: "Preprocessor/map/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/sub"
  op: "Sub"
  input: "Preprocessor/mul"
  input: "Preprocessor/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/Conv2D"
  op: "Conv2D"
  input: "Preprocessor/sub"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_1/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_1/BiasAdd"
  op: "BiasAdd"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_1/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_2/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_2/BiasAdd"
  op: "BiasAdd"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_2/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/BiasAdd"
  op: "BiasAdd"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/projection_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_4"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_0/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_4"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_5"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_1/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_5"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_2/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_7"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictionTower/conv2d_3/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Shape_1"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_2/Shape_1"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1/stack"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice_1"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_7"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_2/ClassPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_0/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_1"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_1/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_1"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_2"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_2/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_2"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Relu6_3"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictionTower/conv2d_3/BatchNorm/feature_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Shape"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/strided_slice"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_2/Shape"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice/stack"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_2/strided_slice"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_2/Relu6_3"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_2/Reshape"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_2/BoxPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/BiasAdd"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_4"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_0/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_4"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_5"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_1/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_5"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_2/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_7"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictionTower/conv2d_3/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Shape_1"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_3/Shape_1"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1/stack"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice_1"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_7"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_3/ClassPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_0/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_1"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_1/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_1"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_2"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_2/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_2"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Relu6_3"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictionTower/conv2d_3/BatchNorm/feature_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Shape"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/strided_slice"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_3/Shape"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice/stack"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_3/strided_slice"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_3/Relu6_3"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_3/Reshape"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_3/BoxPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_14/Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_4"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_0/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_4"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_5"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_1/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_5"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_2/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_7"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictionTower/conv2d_3/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Shape_1"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_4/Shape_1"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1/stack"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice_1"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_7"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_4/ClassPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/bottom_up_Conv2d_15/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_0/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_1"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_1/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_1"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_2"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_2/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_2"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Relu6_3"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictionTower/conv2d_3/BatchNorm/feature_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Shape"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/strided_slice"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_4/Shape"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice/stack"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_4/strided_slice"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_4/Relu6_3"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_4/Reshape"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_4/BoxPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Shape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice/stack"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice/stack_1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape/1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape/2"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/strided_slice"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/2"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/3"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/4"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape/5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape"
  op: "Reshape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_3/BiasAdd"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1"
  op: "Reshape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/mul"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling/Reshape_1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Shape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice/stack"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice/stack_1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape/1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape/2"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/strided_slice"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/2"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/3"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/4"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape/5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape"
  op: "Reshape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/add"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1"
  op: "Reshape"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/mul"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/add_1"
  op: "Add"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/nearest_neighbor_upsampling_1/Reshape_1"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/projection_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/add_1"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_4"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_4"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_5"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_5"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_7"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Shape_1"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice_1"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor/Shape_1"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice_1/stack"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice_1/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape_1/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice_1"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape_1/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_7"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape_1"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_1/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_1"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_1"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_2"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_2"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Relu6_3"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_0/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Shape"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/strided_slice"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor/Shape"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice/stack"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor/strided_slice"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/Relu6_3"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor/Reshape"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/add"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/fpn/smoothing_2/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_4"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_0/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_4"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_5"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_1/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_5"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_2/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_6"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_7"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictionTower/conv2d_3/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Shape_1"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_1/Shape_1"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1/stack"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice_1"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_7"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_1/ClassPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape_1"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape_1"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape_1"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape_1"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape_1"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/scale_logits"
  op: "RealDiv"
  input: "concat_1"
  input: "Postprocessor/scale_logits/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/convert_scores"
  op: "Sigmoid"
  input: "Postprocessor/scale_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/raw_box_scores"
  op: "Identity"
  input: "Postprocessor/convert_scores"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Slice"
  op: "Slice"
  input: "Postprocessor/raw_box_scores"
  input: "Postprocessor/Slice/begin"
  input: "Postprocessor/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "Postprocessor/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_0/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/fpn/top_down/smoothing_2/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_0/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_0/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_0/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_0/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_1/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_1/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_1"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_1/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_1"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_2/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_2/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_2"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_2/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_2"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_3/Identity"
  op: "Identity"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_3/Identity"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/gamma/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/beta/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_mean/read"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Relu6_3"
  op: "Relu6"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictionTower/conv2d_3/BatchNorm/feature_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Shape"
  op: "Shape"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/strided_slice"
  op: "StridedSlice"
  input: "WeightSharedConvolutionalBoxPredictor_1/Shape"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice/stack"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice/stack_1"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape/shape"
  op: "Pack"
  input: "WeightSharedConvolutionalBoxPredictor_1/strided_slice"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape/shape/1"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictor/Conv2D"
  op: "Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor_1/Relu6_3"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictor/BiasAdd"
  op: "BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictor/Conv2D"
  input: "WeightSharedConvolutionalBoxPredictor/BoxPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "WeightSharedConvolutionalBoxPredictor_1/Reshape"
  op: "Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_1/BoxPredictor/BiasAdd"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "WeightSharedConvolutionalBoxPredictor/Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_1/Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_2/Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_3/Reshape"
  input: "WeightSharedConvolutionalBoxPredictor_4/Reshape"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/raw_box_encodings"
  op: "Identity"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Reshape_1"
  op: "Reshape"
  input: "Postprocessor/raw_box_encodings"
  input: "Postprocessor/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Rank"
  op: "Rank"
  input: "Postprocessor/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Range"
  op: "Range"
  input: "Postprocessor/Decode/transpose/Range/start"
  input: "Postprocessor/Decode/transpose/Rank"
  input: "Postprocessor/Decode/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/sub"
  op: "Sub"
  input: "Postprocessor/Decode/transpose/Rank"
  input: "Postprocessor/Decode/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/transpose/sub"
  input: "Postprocessor/Decode/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose"
  op: "Transpose"
  input: "Postprocessor/Reshape_1"
  input: "Postprocessor/Decode/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/unstack"
  op: "Unpack"
  input: "Postprocessor/Decode/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_3"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:3"
  input: "Postprocessor/Decode/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/Exp"
  op: "Exp"
  input: "Postprocessor/Decode/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_2"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:2"
  input: "Postprocessor/Decode/truediv_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/Exp_1"
  op: "Exp"
  input: "Postprocessor/Decode/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:1"
  input: "Postprocessor/Decode/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack"
  input: "Postprocessor/Decode/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Shape"
  op: "Shape"
  input: "Postprocessor/raw_box_encodings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/Shape"
  input: "Postprocessor/strided_slice_1/stack"
  input: "Postprocessor/strided_slice_1/stack_1"
  input: "Postprocessor/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/Shape"
  input: "Postprocessor/strided_slice/stack"
  input: "Postprocessor/strided_slice/stack_1"
  input: "Postprocessor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/stack"
  op: "Pack"
  input: "Postprocessor/strided_slice"
  input: "Postprocessor/strided_slice_1"
  input: "Postprocessor/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples"
  op: "Pack"
  input: "Postprocessor/strided_slice"
  input: "Postprocessor/Tile/multiples/1"
  input: "Postprocessor/Tile/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Tile"
  op: "Tile"
  input: "Postprocessor/ExpandDims"
  input: "Postprocessor/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape"
  op: "Reshape"
  input: "Postprocessor/Tile"
  input: "Postprocessor/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Rank"
  op: "Rank"
  input: "Postprocessor/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range"
  op: "Range"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/start"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Rank"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Rank"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose"
  op: "Transpose"
  input: "Postprocessor/Reshape"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  op: "Unpack"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:2"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_2"
  op: "Mul"
  input: "Postprocessor/Decode/truediv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_1"
  op: "Mul"
  input: "Postprocessor/Decode/Exp_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_6"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul_1"
  input: "Postprocessor/Decode/truediv_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_4"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul_1"
  input: "Postprocessor/Decode/truediv_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv"
  op: "RealDiv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/add"
  op: "Add"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add"
  op: "Add"
  input: "Postprocessor/Decode/mul_2"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_2"
  op: "Add"
  input: "Postprocessor/Decode/add"
  input: "Postprocessor/Decode/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/sub"
  op: "Sub"
  input: "Postprocessor/Decode/add"
  input: "Postprocessor/Decode/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:3"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_3"
  op: "Mul"
  input: "Postprocessor/Decode/truediv_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul"
  op: "Mul"
  input: "Postprocessor/Decode/Exp"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_7"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul"
  input: "Postprocessor/Decode/truediv_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_5"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul"
  input: "Postprocessor/Decode/truediv_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/add_1"
  op: "Add"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_1"
  op: "Add"
  input: "Postprocessor/Decode/mul_3"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_3"
  op: "Add"
  input: "Postprocessor/Decode/add_1"
  input: "Postprocessor/Decode/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/add_1"
  input: "Postprocessor/Decode/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/stack"
  op: "Pack"
  input: "Postprocessor/Decode/sub"
  input: "Postprocessor/Decode/sub_1"
  input: "Postprocessor/Decode/add_2"
  input: "Postprocessor/Decode/add_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Rank"
  op: "Rank"
  input: "Postprocessor/Decode/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Range"
  op: "Range"
  input: "Postprocessor/Decode/transpose_1/Range/start"
  input: "Postprocessor/Decode/transpose_1/Rank"
  input: "Postprocessor/Decode/transpose_1/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/sub"
  op: "Sub"
  input: "Postprocessor/Decode/transpose_1/Rank"
  input: "Postprocessor/Decode/transpose_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/transpose_1/sub"
  input: "Postprocessor/Decode/transpose_1/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1"
  op: "Transpose"
  input: "Postprocessor/Decode/stack"
  input: "Postprocessor/Decode/transpose_1/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape_2"
  op: "Reshape"
  input: "Postprocessor/Decode/transpose_1"
  input: "Postprocessor/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/raw_box_locations"
  op: "Identity"
  input: "Postprocessor/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_1"
  op: "ExpandDims"
  input: "Postprocessor/raw_box_locations"
  input: "Postprocessor/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less_1"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LogicalAnd"
  op: "LogicalAnd"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less_1"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  op: "LoopCond"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LogicalAnd"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_1"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert/data_0"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect field size: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/score_threshold"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-08
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/iou_threshold"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_6"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_6"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_6"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_6"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_6"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Postprocessor/ToFloat_3"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArrayGatherV3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "num_detections"
  op: "Identity"
  input: "Postprocessor/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_6"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_4"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_4"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_4"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_4"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_4"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArrayGatherV3"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "detection_classes"
  op: "Identity"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_4"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_3"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "detection_scores"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_3"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_2"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "detection_boxes"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_2"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range"
  input: "Postprocessor/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/stack_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range"
  input: "Postprocessor/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/Slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range"
  input: "Postprocessor/ExpandDims_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/ExpandDims_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape_1"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/packed"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/packed"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/mul"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_1"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/NonMaxSuppressionV3"
  op: "NonMaxSuppressionV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/iou_threshold"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/score_threshold"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/NonMaxSuppressionV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  op: "Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like"
  op: "ZerosLike"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/NonMaxSuppressionV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Equal"
  op: "Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert"
  op: "Assert"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert/data_0"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2"
  op: "TopKV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_3"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_3"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_2"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_2"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_1"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Squeeze"
  op: "Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Where"
  op: "Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_2"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_6"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_7"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_3"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_2"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_3"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_4"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_6"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_2"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_2"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Preprocessor/map/TensorArray"
  input: "Preprocessor/map/TensorArrayUnstack/range"
  input: "ToFloat"
  input: "Preprocessor/map/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToFloat"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Preprocessor/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Preprocessor/map/while/TensorArrayReadV3/Enter"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize_images/ExpandDims"
  op: "ExpandDims"
  input: "Preprocessor/map/while/TensorArrayReadV3"
  input: "Preprocessor/map/while/ResizeImage/resize_images/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize_images/ResizeBilinear"
  op: "ResizeBilinear"
  input: "Preprocessor/map/while/ResizeImage/resize_images/ExpandDims"
  input: "Preprocessor/map/while/ResizeImage/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize_images/Squeeze"
  op: "Squeeze"
  input: "Preprocessor/map/while/ResizeImage/resize_images/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/ResizeImage/resize_images/Squeeze"
  input: "Preprocessor/map/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/resize_images/Squeeze"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_2"
  op: "NextIteration"
  input: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
